name: Deploy to Server

on:
  push:
    branches:
      - main

permissions:
  packages: write

jobs:
  commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit hash
        id: get_commit
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Install dependencies
        run: go get .
      - name: Build
        run: go build -v ./...
      - name: Test with the Go CLI
        run: go test

  build-and-push-image:
    needs:
      - build-and-test
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          platforms: linux/amd64  # Specifically for your VPS architecture
          push: true
          tags: |
            ghcr.io/naufaldi/guestbook:${{ needs.commit-hash.outputs.commit_hash }}
            ghcr.io/naufaldi/guestbook:prod

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
      - commit-hash
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Make sure directory exists
          mkdir -p /root/guestbook
          cd /root/guestbook

          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/naufaldi/guestbook:prod
          
          # Make sure db/password.txt exists
          mkdir -p db
          if [ ! -f db/password.txt ]; then
            echo "your_secure_password" > db/password.txt
          fi
          
          # Copy compose file if it doesn't exist
          if [ ! -f compose.prod.yaml ]; then
            # You might want to add a step to copy your compose.prod.yaml to the server
            echo "Compose file not found"
            exit 1
          fi
          
          # Deploy using compose.prod.yaml
          docker compose -f compose.prod.yaml down
          docker compose -f compose.prod.yaml up -d
          
          # Clean up old images
          docker image prune -f